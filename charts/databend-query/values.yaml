# Default values for databend-query.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

# Could be StatefulSet or Deployment
workload: StatefulSet

# By default, the queries are routed to the first node in the StatefulSet, and this node is considered 
# as the coordinator. If you want to enable load balance queries across nodes, set this to true. Please
# note that when this is enabled, you can not get the consistent running queries by SHOW PROCESSLIST.
enableLoadBalance: false

image:
  repository: datafuselabs/databend-query
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

service:
  type: ClusterIP
  ports:
    metric: 7070
    admin: 8080
    flight: 9090

    http: 8000
    flightsql: 8900
    mysql: 3307
    ckhttp: 8124

  # Annotations to add to the service
  annotations: {}

  sessionAffinity:
    type: None
    config: {}

envs: []
  # - name: SENTRY_TRACES_SAMPLE_RATE
  #   value: "0.5"


# mutually exclusive with podMonitor
serviceMonitor:
  enabled: false
  port: metric

# mutually exclusive with serviceMonitor
podMonitor:
  enabled: false
  port: metric

# Config settings to go into the mounted config.toml
config:
  # [query]
  query:
    tenantId: ""
    clusterId: default

    managementMode: false
    jwtKeyFile: ""

    extra:
      max_active_sessions: 256
      databend_enterprise_license: ""

    # NOTE: user `root` is already built-in, will be ignored if defined here
    users: []
      # - name: databend
      #   # available type: sha256_password, double_sha1_password, no_password, jwt
      #   # sha1sum: echo -n "password" | sha1sum | cut -d' ' -f1 | xxd -r -p | sha1sum
      #   authType: double_sha1_password
      #   authString: 3081f32caef285c232d066033c89a78d88a6d8a5  # databend
    
    # NOTE: use it for on premise session parameters 
    settings:
      timezone: "UTC"

  # [log]
  log:
    file:
      enabled: false
      level: "INFO"
      dir: "/var/log/databend"
    stderr:
      enabled: true
      level: "WARN"

  # [meta]
  meta:
    # If databend-meta is hosted in the same cluster as databend-data, you can enable this to generate endpoints in a K8s native way.
    generateEndpoints: false
    # Databend-meta replica count
    replicas: 3
    # Databend-meta port if you need to change it
    port: 9191
    # If databend-meta is located in the same cluster, but a different namespace, specify it here
    namespace: ""
    # Set endpoints to use remote meta service
    endpoints:
      # <podName>.<serviceName>.<namespace>.svc.cluster.local:9191
      - "databend-meta-0.databend-meta.databend-meta.svc.cluster.local:9191"
      - "databend-meta-1.databend-meta.databend-meta.svc.cluster.local:9191"
      - "databend-meta-2.databend-meta.databend-meta.svc.cluster.local:9191"
    username: "root"
    password: "root"
    clientTimeoutInSecond: 60

  # [storage]
  storage:
    type: "s3"
    allow_insecure: false
    # [storage.s3]
    s3:
      bucket: "databend"
      endpoint_url: "https://s3.amazonaws.com"
      access_key_id: ""
      secret_access_key: ""
      enable_virtual_host_style: false

    # [storage.gcs]
    gcs:
      bucket: "databend"
      endpoint_url: "https://storage.googleapis.com/"
      credential: ""

    # [storage.oss]
    oss:
      bucket: "databend"
      endpoint_url: "https://oss.aliyuncs.com"
      access_key_id: ""
      access_key_secret: ""

# NOTE: only for StatefulSet
cache:
  enabled: false
  path: "/var/lib/databend/cache"
  maxBytes: 21474836480
  storageClass: ""

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
          # servicePort defaults to service.ports.http
          # servicePort: 8000
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

podAnnotations: {}

podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

nodeSelector: {}

tolerations: []

affinity: {}

topologySpreadConstraints: []

sidecars: []
# Attach additional containers to the pod
# - name: your-image-name
#   image: your-image
#   imagePullPolicy: Always
#   ports:
#   - name: portname
#     containerPort: 1234

initContainers: []
# Add additional init containers to the pod
# - name: your-image-name
#   image: your-image
#   imagePullPolicy: Always
#   ports:
#   - name: portname
#     containerPort: 1234
